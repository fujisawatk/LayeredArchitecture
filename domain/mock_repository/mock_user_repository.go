// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/user_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "LayeredArchitecture/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// SelectByPrimaryKey mocks base method
func (m *MockUserRepository) SelectByPrimaryKey(userID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByPrimaryKey", userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByPrimaryKey indicates an expected call of SelectByPrimaryKey
func (mr *MockUserRepositoryMockRecorder) SelectByPrimaryKey(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByPrimaryKey", reflect.TypeOf((*MockUserRepository)(nil).SelectByPrimaryKey), userID)
}

// Insert mocks base method
func (m *MockUserRepository) Insert(userID, name, email, password string, admin bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", userID, name, email, password, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockUserRepositoryMockRecorder) Insert(userID, name, email, password, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepository)(nil).Insert), userID, name, email, password, admin)
}

// SelectByEmail mocks base method
func (m *MockUserRepository) SelectByEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByEmail indicates an expected call of SelectByEmail
func (mr *MockUserRepositoryMockRecorder) SelectByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByEmail", reflect.TypeOf((*MockUserRepository)(nil).SelectByEmail), email)
}
