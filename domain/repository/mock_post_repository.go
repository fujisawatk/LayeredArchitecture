// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/post_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "LayeredArchitecture/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostRepository is a mock of PostRepository interface
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// SelectByPrimaryKey mocks base method
func (m *MockPostRepository) SelectByPrimaryKey(postID int) (*domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByPrimaryKey", postID)
	ret0, _ := ret[0].(*domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByPrimaryKey indicates an expected call of SelectByPrimaryKey
func (mr *MockPostRepositoryMockRecorder) SelectByPrimaryKey(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByPrimaryKey", reflect.TypeOf((*MockPostRepository)(nil).SelectByPrimaryKey), postID)
}

// GetAll mocks base method
func (m *MockPostRepository) GetAll() ([]domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPostRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostRepository)(nil).GetAll))
}

// Insert mocks base method
func (m *MockPostRepository) Insert(content, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", content, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockPostRepositoryMockRecorder) Insert(content, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPostRepository)(nil).Insert), content, userID)
}

// UpdateByPrimaryKey mocks base method
func (m *MockPostRepository) UpdateByPrimaryKey(postID int, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByPrimaryKey", postID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByPrimaryKey indicates an expected call of UpdateByPrimaryKey
func (mr *MockPostRepositoryMockRecorder) UpdateByPrimaryKey(postID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByPrimaryKey", reflect.TypeOf((*MockPostRepository)(nil).UpdateByPrimaryKey), postID, content)
}

// DeleteByPrimaryKey mocks base method
func (m *MockPostRepository) DeleteByPrimaryKey(postID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByPrimaryKey", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByPrimaryKey indicates an expected call of DeleteByPrimaryKey
func (mr *MockPostRepositoryMockRecorder) DeleteByPrimaryKey(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPrimaryKey", reflect.TypeOf((*MockPostRepository)(nil).DeleteByPrimaryKey), postID)
}
